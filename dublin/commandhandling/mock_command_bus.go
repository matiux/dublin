// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/matiux/dublin/dublin/commandhandling (interfaces: CommandBus)

// Package mock_commandhandling is a generated GoMock package.
package commandhandling

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommandBus is a mock of CommandBus interface.
type MockCommandBus struct {
	ctrl     *gomock.Controller
	recorder *MockCommandBusMockRecorder
}

// MockCommandBusMockRecorder is the mock recorder for MockCommandBus.
type MockCommandBusMockRecorder struct {
	mock *MockCommandBus
}

// NewMockCommandBus creates a new mock instance.
func NewMockCommandBus(ctrl *gomock.Controller) *MockCommandBus {
	mock := &MockCommandBus{ctrl: ctrl}
	mock.recorder = &MockCommandBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandBus) EXPECT() *MockCommandBusMockRecorder {
	return m.recorder
}

// Dispatch mocks base method.
func (m *MockCommandBus) Dispatch(arg0 Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockCommandBusMockRecorder) Dispatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockCommandBus)(nil).Dispatch), arg0)
}

// Subscribe mocks base method.
func (m *MockCommandBus) Subscribe(arg0 CommandHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockCommandBusMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCommandBus)(nil).Subscribe), arg0)
}
